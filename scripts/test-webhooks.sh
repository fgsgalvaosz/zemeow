#!/bin/bash

# üîó Script para testar webhooks do ZeMeow com Webhook Tester
# Este script automatiza o processo de teste de webhooks

set -e

# Configura√ß√µes
ZEMEOW_URL="http://localhost:8080"
WEBHOOK_TESTER_URL="http://localhost:8090"
API_KEY="${ADMIN_API_KEY:-test123}"
SESSION_ID="${SESSION_ID:-bd61793a-e353-46b8-8b77-05306a1aa913}"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîó ZeMeow Webhook Tester${NC}"
echo "=================================="

# Fun√ß√£o para verificar se os servi√ßos est√£o rodando
check_services() {
    echo -e "${YELLOW}üì° Verificando servi√ßos...${NC}"
    
    # Verificar ZeMeow
    if curl -s "$ZEMEOW_URL/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ ZeMeow est√° rodando${NC}"
    else
        echo -e "${RED}‚ùå ZeMeow n√£o est√° acess√≠vel em $ZEMEOW_URL${NC}"
        exit 1
    fi
    
    # Verificar Webhook Tester
    if curl -s "$WEBHOOK_TESTER_URL" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Webhook Tester est√° rodando${NC}"
    else
        echo -e "${RED}‚ùå Webhook Tester n√£o est√° acess√≠vel em $WEBHOOK_TESTER_URL${NC}"
        echo -e "${YELLOW}üí° Execute: docker-compose --profile webhook-test up webhook-tester -d${NC}"
        exit 1
    fi
}

# Fun√ß√£o para obter uma sess√£o de webhook
get_webhook_session() {
    echo -e "${YELLOW}üéØ Obtendo sess√£o de webhook...${NC}"
    
    # Para este exemplo, vamos usar uma sess√£o fixa
    # Em um ambiente real, voc√™ criaria uma nova sess√£o via interface web
    WEBHOOK_SESSION_ID="zemeow-test-$(date +%s)"
    WEBHOOK_URL="$WEBHOOK_TESTER_URL/webhook/$WEBHOOK_SESSION_ID"
    
    echo -e "${GREEN}üìã URL do Webhook: $WEBHOOK_URL${NC}"
    echo -e "${BLUE}üí° Acesse $WEBHOOK_TESTER_URL para ver as requisi√ß√µes em tempo real${NC}"
}

# Fun√ß√£o para configurar webhook no ZeMeow
configure_webhook() {
    echo -e "${YELLOW}‚öôÔ∏è Configurando webhook no ZeMeow...${NC}"
    
    RESPONSE=$(curl -s -X POST "$ZEMEOW_URL/webhooks/sessions/$SESSION_ID/set" \
        -H "apikey: $API_KEY" \
        -H "Content-Type: application/json" \
        -d "{
            \"url\": \"$WEBHOOK_URL\",
            \"events\": [\"message\", \"receipt\", \"connected\", \"disconnected\"],
            \"active\": true
        }")
    
    if echo "$RESPONSE" | grep -q "configured successfully"; then
        echo -e "${GREEN}‚úÖ Webhook configurado com sucesso${NC}"
    else
        echo -e "${RED}‚ùå Erro ao configurar webhook:${NC}"
        echo "$RESPONSE"
        exit 1
    fi
}

# Fun√ß√£o para testar webhook diretamente
test_webhook_direct() {
    echo -e "${YELLOW}üß™ Testando webhook diretamente...${NC}"
    
    curl -X POST "$WEBHOOK_URL" \
        -H "Content-Type: application/json" \
        -d "{
            \"session_id\": \"$SESSION_ID\",
            \"event\": \"message\",
            \"data\": {
                \"id\": \"msg_test_$(date +%s)\",
                \"from\": \"5511999999999@s.whatsapp.net\",
                \"to\": \"5511888888888@s.whatsapp.net\",
                \"message\": {
                    \"type\": \"text\",
                    \"text\": \"üéâ Hello from ZeMeow! This is a test message sent at $(date)\"
                },
                \"timestamp\": $(date +%s)
            }
        }" > /dev/null 2>&1
    
    echo -e "${GREEN}‚úÖ Webhook de teste enviado${NC}"
}

# Fun√ß√£o para listar eventos dispon√≠veis
list_events() {
    echo -e "${YELLOW}üìã Eventos dispon√≠veis no ZeMeow:${NC}"
    
    EVENTS=$(curl -s "$ZEMEOW_URL/webhooks/events" -H "apikey: $API_KEY")
    echo "$EVENTS" | jq -r '.events[] | "‚Ä¢ \(.name) (\(.category)) - \(.description)"' 2>/dev/null || echo "$EVENTS"
}

# Fun√ß√£o para mostrar estat√≠sticas
show_stats() {
    echo -e "${YELLOW}üìä Buscando webhooks configurados...${NC}"
    
    WEBHOOKS=$(curl -s "$ZEMEOW_URL/webhooks/sessions/$SESSION_ID/find" -H "apikey: $API_KEY")
    echo "$WEBHOOKS" | jq '.' 2>/dev/null || echo "$WEBHOOKS"
}

# Menu principal
show_menu() {
    echo ""
    echo -e "${BLUE}Escolha uma op√ß√£o:${NC}"
    echo "1. Verificar servi√ßos"
    echo "2. Configurar webhook"
    echo "3. Testar webhook diretamente"
    echo "4. Listar eventos dispon√≠veis"
    echo "5. Mostrar webhooks configurados"
    echo "6. Executar teste completo"
    echo "7. Abrir Webhook Tester no navegador"
    echo "0. Sair"
    echo ""
}

# Fun√ß√£o para teste completo
full_test() {
    echo -e "${BLUE}üöÄ Executando teste completo...${NC}"
    check_services
    get_webhook_session
    configure_webhook
    test_webhook_direct
    echo ""
    echo -e "${GREEN}üéâ Teste completo finalizado!${NC}"
    echo -e "${BLUE}üí° Acesse $WEBHOOK_TESTER_URL para ver as requisi√ß√µes recebidas${NC}"
}

# Fun√ß√£o para abrir no navegador (se dispon√≠vel)
open_browser() {
    echo -e "${YELLOW}üåê Tentando abrir Webhook Tester no navegador...${NC}"
    
    if command -v xdg-open > /dev/null; then
        xdg-open "$WEBHOOK_TESTER_URL"
    elif command -v open > /dev/null; then
        open "$WEBHOOK_TESTER_URL"
    else
        echo -e "${BLUE}üí° Abra manualmente: $WEBHOOK_TESTER_URL${NC}"
    fi
}

# Inicializa√ß√£o
get_webhook_session

# Loop do menu
while true; do
    show_menu
    read -p "Digite sua op√ß√£o: " choice
    
    case $choice in
        1) check_services ;;
        2) configure_webhook ;;
        3) test_webhook_direct ;;
        4) list_events ;;
        5) show_stats ;;
        6) full_test ;;
        7) open_browser ;;
        0) echo -e "${GREEN}üëã At√© logo!${NC}"; exit 0 ;;
        *) echo -e "${RED}‚ùå Op√ß√£o inv√°lida${NC}" ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
done
